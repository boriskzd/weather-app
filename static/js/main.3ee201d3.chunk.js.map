{"version":3,"sources":["app/weatherApi.js","app/weatherSlice.js","components/SearchCity.js","utils/weatherUtils.js","components/CurrentWeather.js","components/WeatherChart.js","components/Day.js","components/NextWeek.js","components/Weather.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["weatherApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getWeatherByCity","query","latLong","lat","lon","getCities","city","useGetWeatherByCityQuery","useGetCitiesQuery","initialState","name","country","state","undefined","weatherSlice","createSlice","reducers","setCurrentLocation","action","payload","actions","SearchCity","useState","searchCity","setSearchCity","data","isLoading","error","dispatch","useDispatch","array","handleTyping","event","target","value","Paper","Box","sx","marginBottom","onSubmit","e","preventDefault","Autocomplete","disablePortal","id","autoHighlight","onChange","console","log","options","getOptionLabel","option","renderOption","props","component","mr","flexShrink","key","Math","random","width","src","toLowerCase","alt","style","boxShadow","renderInput","params","TextField","label","variant","daysOfWeek","months","CurrentWeather","currentLocation","useSelector","weather","cityName","icon","desc","description","descSentence","toUpperCase","slice","today","Date","dt","currentDayOfWeek","getDay","dayOfMonth","getDate","month","getMonth","dateText","temp","pressure","dew_point","uvi","humidity","wind_speed","wind_deg","visibility","windDir","degrees","windDirectionsList","degreesPerWind","length","round","calculateWindDirection","visibilityText","visibilityMetersOrKm","textTitle","color","paddingRight","Grid","container","justifyContent","item","Typography","marginRight","alignItems","xs","sm","display","flexDirection","height","align","paddingLeft","toFixed","WeatherChart","newData","minTemp","maxTemp","map","obj","newObj","rain","pop","time","getHours","tempDiff","Divider","Chip","size","ResponsiveContainer","ComposedChart","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","yAxisId","dataKey","type","stroke","fill","x","y","index","text","dy","fontSize","textAnchor","legendType","YAxis","domain","allowDecimals","Line","cx","dot","r","orientation","CartesianGrid","strokeDasharray","XAxis","interval","tick","Legend","Tooltip","labelFormatter","formatter","nameHtml","renderTooltipFormatter","Day","day","dayOfWeek","day2","min","max","textAlign","NextWeek","flexFlow","gap","overflowY","minWidth","marginTop","daily","Weather","paddingTop","paddingBottom","elevation","Card","CardContent","current","hourly","App","CssBaseline","backgroundColor","Container","maxWidth","store","configureStore","reducer","weatherReducer","middleware","getDefaultMiddleware","concat","setupListeners","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ee201d3.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const weatherApi = createApi({\r\n  reducerPath: '',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://api.openweathermap.org/',\r\n  }),\r\n  endpoints: (builder) => ({\r\n    getWeatherByCity: builder.query({\r\n      // query: (name) => `pokemon/${getPokemonByName}`,\r\n      query: (latLong) =>\r\n        `data/2.5/onecall?lat=${latLong.lat}&lon=${latLong.lon}&units=metric&exclude=minutely&appid=bfd623391de7c5ae0f4979b6a11b1f77`,\r\n    }),\r\n    getCities: builder.query({\r\n      query: (city) =>\r\n        `geo/1.0/direct?q=${city}&limit=5&appid=bfd623391de7c5ae0f4979b6a11b1f77`,\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetWeatherByCityQuery, useGetCitiesQuery } = weatherApi;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  name: 'Zagreb',\r\n  country: 'HR',\r\n  lat: 45.8144,\r\n  lon: 15.978,\r\n  state: undefined,\r\n};\r\n\r\nexport const weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setCurrentLocation: (state, action) => {\r\n      state.lat = action.payload.lat;\r\n      state.lon = action.payload.lon;\r\n      state.country = action.payload.country;\r\n      state.name = action.payload.name;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setCurrentLocation } = weatherSlice.actions;\r\n\r\nexport default weatherSlice.reducer;\r\n","import { useState } from 'react';\r\nimport { Autocomplete, Box, Paper, TextField } from '@mui/material';\r\n\r\nimport { useGetCitiesQuery } from '../app/weatherApi';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { setCurrentLocation } from '../app/weatherSlice';\r\n\r\nconst SearchCity = () => {\r\n  const [searchCity, setSearchCity] = useState('');\r\n\r\n  const { data, error, isLoading } = useGetCitiesQuery(searchCity);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  let array = [];\r\n\r\n  // console.log('loading: ', isLoading);\r\n  // console.log(data);\r\n\r\n  if (!isLoading && data !== undefined) {\r\n    array = data;\r\n  }\r\n\r\n  const handleTyping = (event) => {\r\n    setSearchCity(event.target.value);\r\n  };\r\n\r\n  const handleSelect = (e, value) => {\r\n    console.log('handle select');\r\n    console.log(value);\r\n    console.log(value.lat);\r\n    dispatch(setCurrentLocation(value));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // TODO: select first option when clicking enter\r\n  };\r\n\r\n  return (\r\n    <Paper>\r\n      <Box sx={{ marginBottom: 2 }}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Autocomplete\r\n            disablePortal\r\n            id='search-city-autocomplete'\r\n            autoHighlight\r\n            onChange={handleSelect}\r\n            options={array}\r\n            getOptionLabel={(option) => `${option.name}, ${option.country}`}\r\n            renderOption={(props, option) => (\r\n              <Box\r\n                component='li'\r\n                sx={{ '& > img': { mr: 2, flexShrink: 0 } }}\r\n                {...props}\r\n                key={Math.random()}\r\n              >\r\n                <img\r\n                  width='24'\r\n                  src={`https://flagcdn.com/${option.country.toLowerCase()}.svg`}\r\n                  alt=''\r\n                  style={{ boxShadow: '1px 1px 4px #bbb' }}\r\n                />\r\n                {option.name} ({option.country})\r\n              </Box>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                label='Search City'\r\n                variant='filled'\r\n                onChange={handleTyping}\r\n                {...params}\r\n              />\r\n            )}\r\n          />\r\n        </form>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default SearchCity;\r\n","export const calculateWindDirection = (degrees) => {\r\n  const windDirectionsList = [\r\n    'N',\r\n    'N/NE',\r\n    'NE',\r\n    'E/NE',\r\n    'E',\r\n    'E/SE',\r\n    'SE',\r\n    'S/SE',\r\n    'S',\r\n    'S/SW',\r\n    'SW',\r\n    'W/SW',\r\n    'W',\r\n    'W/NW',\r\n    'NW',\r\n    'N/NW',\r\n  ];\r\n\r\n  const degreesPerWind = 360 / windDirectionsList.length;\r\n\r\n  const wind = Math.round(degrees / degreesPerWind);\r\n\r\n  const windDirection = windDirectionsList[wind];\r\n\r\n  return windDirection;\r\n};\r\n\r\nexport const visibilityMetersOrKm = (visibility) => {\r\n  const visibilityText =\r\n    visibility > 1000\r\n      ? `${Math.round(visibility / 1000)} km`\r\n      : `${visibility} m`;\r\n\r\n  return visibilityText;\r\n};\r\n\r\nexport const daysOfWeek = [\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n  'Sunday',\r\n];\r\n\r\nexport const months = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n","import { Box, Grid, Typography } from '@mui/material';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  daysOfWeek,\r\n  months,\r\n  calculateWindDirection,\r\n  visibilityMetersOrKm,\r\n} from '../utils/weatherUtils';\r\n\r\nconst CurrentWeather = (data) => {\r\n  const currentLocation = useSelector((state) => state.weather);\r\n\r\n  const cityName = `${currentLocation.name}, ${currentLocation.country}`;\r\n  console.log(data.data);\r\n  const icon = `https://openweathermap.org/img/wn/${data.data.weather[0].icon}@2x.png`;\r\n  const desc = data.data.weather[0].description;\r\n  const descSentence = desc[0].toUpperCase() + desc.slice(1);\r\n\r\n  const today = new Date(data.data.dt * 1000);\r\n  const currentDayOfWeek = daysOfWeek[today.getDay()];\r\n  const dayOfMonth = today.getDate();\r\n  const month = today.getMonth();\r\n  console.log(currentDayOfWeek, months[month], dayOfMonth);\r\n  const dateText = `${currentDayOfWeek}, ${months[month]} ${dayOfMonth}`;\r\n\r\n  const {\r\n    temp,\r\n    pressure,\r\n    dew_point,\r\n    uvi,\r\n    humidity,\r\n    wind_speed,\r\n    wind_deg,\r\n    visibility,\r\n  } = data.data;\r\n\r\n  // console.log(data);\r\n  const windDir = calculateWindDirection(wind_deg);\r\n  const visibilityText = visibilityMetersOrKm(visibility);\r\n\r\n  // const styles = (theme) => ({\r\n  //   root: {\r\n  //     padding: theme.spacing(1),\r\n  //     [theme.breakpoints.down('md')]: {\r\n  //       backgroundColor: theme.palette.secondary.main,\r\n  //     },\r\n  //     [theme.breakpoints.up('md')]: {\r\n  //       backgroundColor: theme.palette.primary.main,\r\n  //     },\r\n  //     // [theme.breakpoints.up('lg')]: {\r\n  //     //   backgroundColor: green[500],\r\n  //     // },\r\n  //   },\r\n  // });\r\n\r\n  const textTitle = { color: 'text.secondary', paddingRight: 0.5 };\r\n\r\n  return (\r\n    <>\r\n      <Grid container justifyContent='space-between'>\r\n        <Grid item>\r\n          <Typography variant='h5'>\r\n            <img\r\n              width='32'\r\n              src={`https://flagcdn.com/${currentLocation.country.toLowerCase()}.svg`}\r\n              alt=''\r\n              style={{ marginRight: 4, boxShadow: '1px 1px 4px #bbb' }}\r\n            />{' '}\r\n            {cityName}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant='subtitle2' sx={{ color: 'text.secondary' }}>\r\n            {dateText}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container alignItems='center'>\r\n        <Grid item xs={12} sm={4}>\r\n          <Box\r\n            sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n          >\r\n            <img src={icon} alt={desc} width='100px' height='100px' />\r\n            <Typography variant='h5'>{Math.round(temp)} °C</Typography>\r\n          </Box>\r\n          <Typography variant='subtitle1' align='center'>\r\n            {descSentence}\r\n            {/* Feels like {Math.round(feels_like)} °C. */}\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={8}>\r\n          <Grid container sx={{ paddingLeft: 2 }}>\r\n            <Grid item xs={6} sm={6}>\r\n              <Box>\r\n                <Typography variant='caption' sx={textTitle}>\r\n                  Wind:\r\n                </Typography>\r\n                <Typography variant='caption'>\r\n                  {wind_speed.toFixed(1)} m/s {windDir}\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant='caption' sx={textTitle}>\r\n                  Humidity:\r\n                </Typography>\r\n                <Typography variant='caption'>{humidity}% </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant='caption' sx={textTitle}>\r\n                  Visibility:\r\n                </Typography>\r\n                <Typography variant='caption'>{visibilityText}</Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n              <Box>\r\n                <Typography variant='caption' sx={textTitle}>\r\n                  Pressure:\r\n                </Typography>\r\n                <Typography variant='caption'>{pressure} hPa</Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant='caption' sx={textTitle}>\r\n                  Dew point:\r\n                </Typography>\r\n                <Typography variant='caption'>\r\n                  {Math.round(dew_point)} °C\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant='caption' sx={textTitle}>\r\n                  UV:\r\n                </Typography>\r\n                <Typography variant='caption'>{uvi}</Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import { Divider, Chip } from '@mui/material';\r\n\r\nimport {\r\n  CartesianGrid,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  XAxis,\r\n  YAxis,\r\n  Area,\r\n  ComposedChart,\r\n  Line,\r\n  Tooltip,\r\n} from 'recharts';\r\n\r\nimport { daysOfWeek } from '../utils/weatherUtils';\r\n\r\nexport default function WeatherChart(data) {\r\n  let newData = data.data.slice(0, 24);\r\n\r\n  let minTemp = 100;\r\n  let maxTemp = -100;\r\n\r\n  // let currentDay = new Date(obj.dt * 1000).getDay();\r\n  // const today = new Date();\r\n  // const currentDayOfWeek = daysOfWeek[today.getDay()];\r\n  // const dayOfMonth = today.getDay();\r\n  // const month = today.getMonth();\r\n  // console.log(month, dayOfMonth);\r\n\r\n  // daysOfWeek[new Date(data.data[0].dt * 1000).getDay()];\r\n\r\n  newData = newData.map((obj) => {\r\n    let newObj = {};\r\n    newObj.temp = Math.round(obj.temp);\r\n    newObj.rain = Math.round(obj.pop * 100);\r\n\r\n    if (newObj.temp > maxTemp) maxTemp = newObj.temp;\r\n    if (newObj.temp < minTemp) minTemp = newObj.temp;\r\n\r\n    newObj.time = new Date(obj.dt * 1000).getHours();\r\n\r\n    return newObj;\r\n  });\r\n\r\n  if (maxTemp < 2) maxTemp = 2;\r\n\r\n  const tempDiff =\r\n    (maxTemp - minTemp) / 5 < 1 ? 1 : Math.round((maxTemp - minTemp) * 0.2);\r\n\r\n  minTemp -= tempDiff;\r\n  maxTemp += tempDiff;\r\n\r\n  const renderTemperature = ({\r\n    payload,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    value,\r\n    index,\r\n  }) => {\r\n    let text = null;\r\n\r\n    if (index % 3 === 0 && index !== 0)\r\n      text = (\r\n        <text x={x} y={y} dy={-8} fill='#777' fontSize={10} textAnchor='middle'>\r\n          {value} °C\r\n        </text>\r\n      );\r\n\r\n    return text;\r\n  };\r\n\r\n  const renderPrecipitation = ({ payload, x, y, value, index, cx }) => {\r\n    let text = null;\r\n\r\n    if (index % 3 === 0 && index !== 0) {\r\n      text = (\r\n        <text\r\n          x={x}\r\n          y={y}\r\n          dy={-8}\r\n          fill='rgb(49, 130, 189)'\r\n          fontSize={10}\r\n          color='blue'\r\n          textAnchor='middle'\r\n        >\r\n          {value}%\r\n        </text>\r\n      );\r\n    }\r\n    return text;\r\n  };\r\n\r\n  const renderTime = ({ payload, x, y, width, height, value }) => {\r\n    return (\r\n      <text\r\n        x={x}\r\n        y={y}\r\n        fill='#666'\r\n        textAnchor='middle'\r\n        dy={15}\r\n        fontSize={12}\r\n      >{`${payload.value}:00`}</text>\r\n    );\r\n  };\r\n\r\n  const renderTooltipFormatter = (value, name) => {\r\n    let nameHtml = '';\r\n\r\n    switch (name) {\r\n      case 'Temperature °C':\r\n        nameHtml = `Temp: ${value} °C`;\r\n        break;\r\n      case 'Precipitation %':\r\n        nameHtml = `Rain: ${value} % chance`;\r\n        break;\r\n      default:\r\n        nameHtml = 'Default: ' + value;\r\n    }\r\n\r\n    return [nameHtml];\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Divider>\r\n        <Chip label={`Next 24 hours`} size='small' />\r\n      </Divider>\r\n\r\n      <ResponsiveContainer width='100%' height={250}>\r\n        <ComposedChart\r\n          width={660}\r\n          height={250}\r\n          data={newData}\r\n          margin={{\r\n            top: 20,\r\n            right: -25,\r\n            left: -30,\r\n            bottom: 10,\r\n          }}\r\n        >\r\n          {/* Temperature  */}\r\n          <defs>\r\n            <linearGradient\r\n              id='temperatureGradient'\r\n              x1='0'\r\n              y1='0'\r\n              x2='0'\r\n              y2='1'\r\n            >\r\n              <stop offset='5%' stopColor='#fec821' stopOpacity={0.8} />\r\n              <stop offset='95%' stopColor='#eda31d' stopOpacity={0} />\r\n            </linearGradient>\r\n          </defs>\r\n          <Area\r\n            yAxisId={1}\r\n            dataKey='temp'\r\n            name='Temperature °C'\r\n            type='monotone'\r\n            stroke='#eda31d'\r\n            fill='url(#temperatureGradient)'\r\n            label={renderTemperature}\r\n            legendType='square'\r\n          />\r\n          <YAxis\r\n            yAxisId={1}\r\n            domain={[minTemp, maxTemp]}\r\n            allowDecimals={false}\r\n            // label={{ value: 'Temp °C', angle: -90 }}\r\n          />\r\n\r\n          {/* Chance of Rain  */}\r\n          <Line\r\n            yAxisId={2}\r\n            dataKey='rain'\r\n            name='Precipitation %'\r\n            type='monotone'\r\n            label={renderPrecipitation}\r\n            stroke='rgb(49, 130, 189)'\r\n            dot={{ r: 2 }}\r\n          />\r\n          <YAxis\r\n            yAxisId={2}\r\n            domain={[0, 100]}\r\n            // label={{ value: 'Chance of Rain', angle: -90 }}\r\n            orientation='right'\r\n          />\r\n\r\n          {/* Time  */}\r\n          <CartesianGrid strokeDasharray='3 6' />\r\n          <XAxis dataKey='time' interval={2} tick={renderTime} />\r\n\r\n          {/* Other */}\r\n          <Legend />\r\n          <Tooltip\r\n            labelFormatter={(value, name, props) => `Time: ${value}:00 h`}\r\n            formatter={(value, name, props) =>\r\n              renderTooltipFormatter(value, name)\r\n            }\r\n          />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n}\r\n","import { Paper, Typography } from '@mui/material';\r\n\r\nimport { daysOfWeek } from '../utils/weatherUtils';\r\n\r\nconst Day = (day) => {\r\n  const dayOfWeek = new Date(day.day.dt * 1000).getDay();\r\n\r\n  const day2 = daysOfWeek[dayOfWeek].slice(0, 3);\r\n\r\n  const minTemp = Math.round(day.day.temp.min);\r\n  const maxTemp = Math.round(day.day.temp.max);\r\n  const weather = day.day.weather[0].description;\r\n  const icon = `https://openweathermap.org/img/wn/${day.day.weather[0].icon}@2x.png`;\r\n\r\n  return (\r\n    <Paper variant='outlined' sx={{ width: 80, marginBottom: '5px' }}>\r\n      <Typography\r\n        sx={{ color: 'text.secondary', textAlign: 'center', fontSize: 14 }}\r\n      >\r\n        {day2}\r\n      </Typography>\r\n\r\n      <div style={{ width: '100%' }}>\r\n        <img src={icon} alt={weather} width='80px' height='80px' />\r\n      </div>\r\n\r\n      <Typography\r\n        sx={{ color: 'text.primary', textAlign: 'center', fontSize: 14 }}\r\n      >\r\n        {maxTemp}°- {minTemp}°\r\n      </Typography>\r\n\r\n      <Typography\r\n        sx={{ color: 'text.secondary', textAlign: 'center', fontSize: 10 }}\r\n      >\r\n        {weather}\r\n      </Typography>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import { Box } from '@mui/material';\r\n\r\nimport Day from './Day';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function NextWeek(data) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexFlow: 'row nowrap',\r\n        gap: '5px',\r\n        overflowY: 'auto',\r\n        minWidth: 240,\r\n        marginTop: '10px',\r\n      }}\r\n    >\r\n      {data.data.daily.map((day) => {\r\n        return <Day day={day} key={day.dt} />;\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n  Divider,\r\n  Paper,\r\n  Typography,\r\n} from '@mui/material';\r\n\r\nimport SearchCity from './SearchCity';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport WeatherChart from './WeatherChart';\r\n\r\nimport { useGetWeatherByCityQuery } from '../app/weatherApi';\r\nimport { useSelector } from 'react-redux';\r\nimport NextWeek from './NextWeek';\r\n\r\nexport default function Weather() {\r\n  const latLong = useSelector((state) => state.weather);\r\n\r\n  const { data, error, isLoading } = useGetWeatherByCityQuery(latLong);\r\n\r\n  // console.log(data);\r\n\r\n  const loadingHtml = (\r\n    <div style={{ color: 'white', textAlign: 'center' }}>\r\n      <div>Loading...</div>\r\n    </div>\r\n  );\r\n\r\n  if (isLoading) return loadingHtml;\r\n\r\n  return (\r\n    <>\r\n      <Typography\r\n        variant='h4'\r\n        align='center'\r\n        sx={{ color: 'white', paddingTop: 2, paddingBottom: 2 }}\r\n      >\r\n        Weather App\r\n      </Typography>\r\n\r\n      <SearchCity />\r\n\r\n      <Paper elevation={0}>\r\n        <Card>\r\n          <CardContent>\r\n            <CurrentWeather data={data.current} />\r\n\r\n            <WeatherChart data={data.hourly} />\r\n\r\n            <Divider>\r\n              <Chip label='Next 7 days' size='small' />\r\n            </Divider>\r\n\r\n            <NextWeek data={data} />\r\n          </CardContent>\r\n        </Card>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport { Box, Container, CssBaseline } from '@mui/material';\n\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n      <Box sx={{ backgroundColor: '#00003f', paddingBottom: '50px' }}>\n        <Container maxWidth='sm'>\n          <Weather />\n        </Container>\n      </Box>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { setupListeners } from '@reduxjs/toolkit/query/react';\r\n\r\nimport { weatherApi } from './weatherApi';\r\n\r\nimport weatherReducer from './weatherSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    weather: weatherReducer,\r\n    [weatherApi.reducerPath]: weatherApi.reducer,\r\n  },\r\n\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(weatherApi.middleware),\r\n});\r\n\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\r\nsetupListeners(store.dispatch);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}