{"version":3,"sources":["components/Day.js","app/weatherApi.js","app/weatherSlice.js","components/SearchCity.js","components/CurrentWeather.js","utils/weatherUtils.js","components/WeatherChart.js","components/Weather.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Day","day","day2","Date","dt","getDay","slice","minTemp","Math","round","temp","min","maxTemp","max","weather","description","icon","Paper","variant","sx","width","marginBottom","Typography","color","textAlign","fontSize","style","src","alt","height","weatherApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getWeatherByCity","query","latLong","lat","lon","getCities","city","useGetWeatherByCityQuery","useGetCitiesQuery","initialState","name","country","state","undefined","weatherSlice","createSlice","reducers","setLatLong","action","payload","actions","SearchCity","useState","searchCity","setSearchCity","data","isLoading","dispatch","useDispatch","array","handleTyping","event","target","value","Box","onSubmit","e","preventDefault","Autocomplete","disablePortal","id","onChange","console","log","options","getOptionLabel","option","renderOption","props","component","mr","flexShrink","key","random","toLowerCase","boxShadow","renderInput","params","TextField","label","CurrentWeather","useSelector","cityName","desc","descSentence","toUpperCase","pressure","dew_point","uvi","humidity","wind_speed","wind_deg","visibility","windDir","degrees","windDirectionsList","degreesPerWind","length","calculateWindDirection","visibilityText","visibilityMetersOrKm","marginRight","Grid","container","item","xs","sm","display","flexDirection","alignItems","paddingLeft","toFixed","WeatherChart","prognoza","table","newData","map","obj","newObj","rain","pop","time","getHours","tempDiff","ResponsiveContainer","ComposedChart","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","yAxisId","dataKey","type","stroke","fill","x","y","index","text","dy","textAnchor","legendType","YAxis","domain","allowDecimals","Line","cx","dot","r","orientation","CartesianGrid","strokeDasharray","XAxis","interval","tick","Legend","Tooltip","labelFormatter","formatter","nameHtml","Weather","align","paddingTop","paddingBottom","elevation","Card","CardContent","current","Divider","Chip","size","hourly","flexFlow","gap","overflowY","minWidth","marginTop","daily","App","CssBaseline","backgroundColor","Container","maxWidth","store","configureStore","reducer","weatherReducer","middleware","getDefaultMiddleware","concat","setupListeners","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bedfb6a.chunk.js","sourcesContent":["import { Paper, Typography } from '@mui/material';\r\n\r\nconst Day = (day) => {\r\n  // console.log(day);\r\n\r\n  const daysOfWeek = [\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday',\r\n    'Sunday',\r\n  ];\r\n\r\n  const dayOfWeek = new Date(day.day.dt * 1000).getDay();\r\n\r\n  const day2 = daysOfWeek[dayOfWeek].slice(0, 3);\r\n\r\n  const minTemp = Math.round(day.day.temp.min);\r\n  const maxTemp = Math.round(day.day.temp.max);\r\n  const weather = day.day.weather[0].description;\r\n  const icon = `https://openweathermap.org/img/wn/${day.day.weather[0].icon}@2x.png`;\r\n\r\n  return (\r\n    <Paper variant='outlined' sx={{ width: 80, marginBottom: '5px' }}>\r\n      <Typography\r\n        sx={{ color: 'text.secondary', textAlign: 'center', fontSize: 14 }}\r\n      >\r\n        {day2}\r\n      </Typography>\r\n\r\n      <div style={{ width: '100%' }}>\r\n        <img src={icon} alt={weather} width='80px' height='80px' />\r\n      </div>\r\n\r\n      <Typography\r\n        sx={{ color: 'text.primary', textAlign: 'center', fontSize: 14 }}\r\n      >\r\n        {maxTemp}°- {minTemp}°\r\n      </Typography>\r\n\r\n      <Typography\r\n        sx={{ color: 'text.secondary', textAlign: 'center', fontSize: 10 }}\r\n      >\r\n        {weather}\r\n      </Typography>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const weatherApi = createApi({\r\n  reducerPath: '',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://api.openweathermap.org/',\r\n  }),\r\n  endpoints: (builder) => ({\r\n    getWeatherByCity: builder.query({\r\n      // query: (name) => `pokemon/${getPokemonByName}`,\r\n      query: (latLong) =>\r\n        `data/2.5/onecall?lat=${latLong.lat}&lon=${latLong.lon}&units=metric&exclude=minutely&appid=bfd623391de7c5ae0f4979b6a11b1f77`,\r\n    }),\r\n    getCities: builder.query({\r\n      query: (city) =>\r\n        `geo/1.0/direct?q=${city}&limit=5&appid=bfd623391de7c5ae0f4979b6a11b1f77`,\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetWeatherByCityQuery, useGetCitiesQuery } = weatherApi;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  name: 'Zagreb',\r\n  country: 'HR',\r\n  lat: 45.8144,\r\n  lon: 15.978,\r\n  state: undefined,\r\n};\r\n\r\nexport const weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setLatLong: (state, action) => {\r\n      state.lat = action.payload.lat;\r\n      state.lon = action.payload.lon;\r\n      state.country = action.payload.country;\r\n      state.name = action.payload.name;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLatLong } = weatherSlice.actions;\r\n\r\nexport default weatherSlice.reducer;\r\n","import { useState } from 'react';\r\nimport { Autocomplete, Box, Paper, TextField } from '@mui/material';\r\n\r\nimport { useGetCitiesQuery } from '../app/weatherApi';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { setLatLong } from '../app/weatherSlice';\r\n\r\nconst SearchCity = () => {\r\n  const [searchCity, setSearchCity] = useState('');\r\n\r\n  const {\r\n    data,\r\n    //  error,\r\n    isLoading,\r\n  } = useGetCitiesQuery(searchCity);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  let array = [];\r\n\r\n  // console.log('loading: ', isLoading);\r\n  // console.log(data);\r\n\r\n  if (!isLoading && data !== undefined) {\r\n    array = data;\r\n  }\r\n\r\n  const handleTyping = (event) => {\r\n    setSearchCity(event.target.value);\r\n  };\r\n\r\n  const handleSelect = (e, value) => {\r\n    console.log('handle select');\r\n    console.log(value);\r\n    console.log(value.lat);\r\n    dispatch(setLatLong(value));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // TODO: select first option when clicking enter\r\n  };\r\n\r\n  return (\r\n    <Paper>\r\n      <Box sx={{ marginBottom: 2 }}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Autocomplete\r\n            disablePortal\r\n            id='search-city-autocomplete'\r\n            // sx={{ width: 300 }}\r\n            onChange={handleSelect}\r\n            options={array}\r\n            getOptionLabel={(option) =>\r\n              // `${option.name}, ${option.country}, ${option.state},  ${option.lat},  ${option.lon}`\r\n              `${option.name}, ${option.country}`\r\n            }\r\n            renderOption={(props, option) => (\r\n              <Box\r\n                component='li'\r\n                sx={{ '& > img': { mr: 2, flexShrink: 0 } }}\r\n                {...props}\r\n                key={Math.random()}\r\n              >\r\n                <img\r\n                  width='24'\r\n                  src={`https://flagcdn.com/${option.country.toLowerCase()}.svg`}\r\n                  alt=''\r\n                  style={{ boxShadow: '1px 1px 4px #bbb' }}\r\n                />\r\n                {option.name} ({option.country})\r\n              </Box>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                label='Search City'\r\n                variant='filled'\r\n                onChange={handleTyping}\r\n                {...params}\r\n              />\r\n            )}\r\n          />\r\n        </form>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default SearchCity;\r\n","import { Box, Grid, Typography } from '@mui/material';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  calculateWindDirection,\r\n  visibilityMetersOrKm,\r\n} from '../utils/weatherUtils';\r\n\r\nconst CurrentWeather = (data) => {\r\n  const latLong = useSelector((state) => state.weather);\r\n\r\n  const cityName = `${latLong.name}, ${latLong.country}`;\r\n\r\n  const icon = `https://openweathermap.org/img/wn/${data.data.weather[0].icon}@2x.png`;\r\n  const desc = data.data.weather[0].description;\r\n  const descSentence = desc[0].toUpperCase() + desc.slice(1) + '.';\r\n\r\n  const {\r\n    temp,\r\n    pressure,\r\n    dew_point,\r\n    // feels_like,\r\n    uvi,\r\n    humidity,\r\n    wind_speed,\r\n    wind_deg,\r\n    visibility,\r\n  } = data.data;\r\n\r\n  // console.log(data);\r\n  const windDir = calculateWindDirection(wind_deg);\r\n  const visibilityText = visibilityMetersOrKm(visibility);\r\n\r\n  return (\r\n    <>\r\n      <Typography variant='h5'>\r\n        <img\r\n          width='32'\r\n          src={`https://flagcdn.com/${latLong.country.toLowerCase()}.svg`}\r\n          alt=''\r\n          style={{ marginRight: 4, boxShadow: '1px 1px 4px #bbb' }}\r\n        />{' '}\r\n        {cityName}\r\n      </Typography>\r\n      <Grid container>\r\n        <Grid item xs={12} sm={4}>\r\n          <Box\r\n            sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n          >\r\n            <img src={icon} alt={desc} width='100px' height='100px' />\r\n            <Typography variant='h5' sx={{}}>\r\n              {Math.round(temp)} °C\r\n            </Typography>\r\n          </Box>\r\n          <Typography variant='subtitle2'>\r\n            {descSentence}\r\n            {/* Feels like {Math.round(feels_like)} °C. */}\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={8}>\r\n          <Grid container sx={{ paddingLeft: 2 }}>\r\n            <Grid item xs={6} sm={6}>\r\n              <Box>\r\n                <Typography variant='caption'>\r\n                  Wind: {wind_speed.toFixed(1)} m/s {windDir}\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant='caption'>\r\n                  <Typography variant='caption'>\r\n                    Humidity: {humidity}%{' '}\r\n                  </Typography>\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant='caption'>\r\n                  Visibility: {visibilityText}\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={6} sm={6}>\r\n              <Box>\r\n                <Typography variant='caption'>\r\n                  <Typography variant='caption'>\r\n                    Pressure: {pressure} hPa\r\n                  </Typography>\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant='caption'>\r\n                  <Typography variant='caption'>\r\n                    Dew point: {Math.round(dew_point)} °C\r\n                  </Typography>\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography variant='caption'>\r\n                  <Typography variant='caption'>UV: {uvi}</Typography>\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","export const calculateWindDirection = (degrees) => {\r\n  const windDirectionsList = [\r\n    'N',\r\n    'N/NE',\r\n    'NE',\r\n    'E/NE',\r\n    'E',\r\n    'E/SE',\r\n    'SE',\r\n    'S/SE',\r\n    'S',\r\n    'S/SW',\r\n    'SW',\r\n    'W/SW',\r\n    'W',\r\n    'W/NW',\r\n    'NW',\r\n    'N/NW',\r\n  ];\r\n\r\n  const degreesPerWind = 360 / windDirectionsList.length;\r\n\r\n  const wind = Math.round(degrees / degreesPerWind);\r\n\r\n  const windDirection = windDirectionsList[wind];\r\n\r\n  return windDirection;\r\n};\r\n\r\nexport const visibilityMetersOrKm = (visibility) => {\r\n  const visibilityText =\r\n    visibility > 1000\r\n      ? `${Math.round(visibility / 1000)} km`\r\n      : `${visibility} m`;\r\n\r\n  return visibilityText;\r\n};\r\n","import {\r\n  CartesianGrid,\r\n  // LabelList,\r\n  // LineChart,\r\n  // Line,\r\n  Legend,\r\n  // Tooltip,\r\n  ResponsiveContainer,\r\n  XAxis,\r\n  YAxis,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart,\r\n  Line,\r\n  Tooltip,\r\n} from 'recharts';\r\nexport default function WeatherChart(prognoza) {\r\n  console.log('grafulja');\r\n  console.table(prognoza.prognoza[0]);\r\n\r\n  let newData = prognoza.prognoza.slice(0, 24);\r\n\r\n  let minTemp = 100;\r\n  let maxTemp = -100;\r\n\r\n  newData = newData.map((obj) => {\r\n    let newObj = {};\r\n    newObj.temp = Math.round(obj.temp);\r\n    newObj.rain = Math.round(obj.pop * 100);\r\n\r\n    if (newObj.temp > maxTemp) maxTemp = newObj.temp;\r\n    if (newObj.temp < minTemp) minTemp = newObj.temp;\r\n\r\n    newObj.time = new Date(obj.dt * 1000).getHours();\r\n\r\n    return newObj;\r\n  });\r\n\r\n  if (maxTemp < 2) maxTemp = 2;\r\n\r\n  const tempDiff =\r\n    (maxTemp - minTemp) / 5 < 1 ? 1 : Math.round((maxTemp - minTemp) * 0.2);\r\n\r\n  minTemp -= tempDiff;\r\n  maxTemp += tempDiff;\r\n\r\n  console.log('newData');\r\n  console.log(newData);\r\n\r\n  const renderTemperature = ({\r\n    payload,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    value,\r\n    index,\r\n  }) => {\r\n    let text = null;\r\n\r\n    if (index % 3 === 0 && index !== 0)\r\n      text = (\r\n        <text x={x} y={y} dy={-8} fill='#777' fontSize={10} textAnchor='middle'>\r\n          {value} °C\r\n        </text>\r\n      );\r\n\r\n    return text;\r\n  };\r\n\r\n  const renderPrecipitation = ({ payload, x, y, value, index, cx }) => {\r\n    let text = null;\r\n\r\n    if (index % 3 === 0 && index !== 0) {\r\n      text = (\r\n        <text\r\n          x={x}\r\n          y={y}\r\n          dy={-8}\r\n          fill='rgb(49, 130, 189)'\r\n          fontSize={10}\r\n          color='blue'\r\n          textAnchor='middle'\r\n        >\r\n          {value}%\r\n        </text>\r\n      );\r\n    }\r\n    return text;\r\n  };\r\n\r\n  const renderTime = ({ payload, x, y, width, height, value }) => {\r\n    return (\r\n      <text\r\n        x={x}\r\n        y={y}\r\n        fill='#666'\r\n        textAnchor='middle'\r\n        dy={15}\r\n        fontSize={12}\r\n      >{`${payload.value}:00`}</text>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ResponsiveContainer width='100%' height={250}>\r\n      <ComposedChart\r\n        width={660}\r\n        height={250}\r\n        data={newData}\r\n        margin={{\r\n          top: 20,\r\n          right: -25,\r\n          left: -30,\r\n          bottom: 10,\r\n        }}\r\n      >\r\n        {/* Temperature  */}\r\n        <defs>\r\n          <linearGradient id='temperatureGradient' x1='0' y1='0' x2='0' y2='1'>\r\n            <stop offset='5%' stopColor='#fec821' stopOpacity={0.8} />\r\n            <stop offset='95%' stopColor='#eda31d' stopOpacity={0} />\r\n          </linearGradient>\r\n        </defs>\r\n        <Area\r\n          yAxisId={1}\r\n          dataKey='temp'\r\n          name='Temperature °C'\r\n          type='monotone'\r\n          stroke='#eda31d'\r\n          fill='url(#temperatureGradient)'\r\n          label={renderTemperature}\r\n          legendType='square'\r\n        />\r\n        <YAxis\r\n          yAxisId={1}\r\n          domain={[minTemp, maxTemp]}\r\n          allowDecimals={false}\r\n          // label={{ value: 'Temp °C', angle: -90 }}\r\n        />\r\n\r\n        {/* Chance of Rain  */}\r\n        <Line\r\n          yAxisId={2}\r\n          dataKey='rain'\r\n          name='Precipitation %'\r\n          type='monotone'\r\n          label={renderPrecipitation}\r\n          stroke='rgb(49, 130, 189)'\r\n          dot={{ r: 2 }}\r\n        />\r\n        <YAxis\r\n          yAxisId={2}\r\n          domain={[0, 100]}\r\n          // label={{ value: 'Chance of Rain', angle: -90 }}\r\n          orientation='right'\r\n        />\r\n\r\n        {/* Time  */}\r\n        <CartesianGrid strokeDasharray='3 6' />\r\n        <XAxis dataKey='time' interval={2} tick={renderTime} />\r\n\r\n        {/* Other  */}\r\n        <Legend />\r\n        <Tooltip\r\n          labelFormatter={(value, name, props) => `Time: ${value}:00 h`}\r\n          formatter={(value, name, props) => {\r\n            let nameHtml = '';\r\n            console.log(name);\r\n            console.log(value);\r\n            console.log(props);\r\n\r\n            switch (name) {\r\n              case 'Temperature °C':\r\n                nameHtml = `Temp: ${value} °C`;\r\n                break;\r\n              case 'Precipitation %':\r\n                nameHtml = `Rain: ${value} % chance`;\r\n                break;\r\n              default:\r\n                nameHtml = 'Default: ' + value;\r\n            }\r\n\r\n            return [nameHtml];\r\n          }}\r\n        />\r\n      </ComposedChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n  Divider,\r\n  Paper,\r\n  Typography,\r\n} from '@mui/material';\r\n\r\nimport Day from './Day';\r\nimport SearchCity from './SearchCity';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport WeatherChart from './WeatherChart';\r\n\r\nimport { useGetWeatherByCityQuery } from '../app/weatherApi';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function Weather() {\r\n  const latLong = useSelector((state) => state.weather);\r\n\r\n  console.log(`lat long: `);\r\n  console.log(latLong);\r\n\r\n  const {\r\n    data,\r\n    //  error,\r\n    isLoading,\r\n  } = useGetWeatherByCityQuery(latLong);\r\n  console.log(data);\r\n\r\n  const loadingHtml = <div>Is Loading...</div>;\r\n\r\n  if (isLoading) return loadingHtml;\r\n\r\n  return (\r\n    <>\r\n      <Typography\r\n        variant='h4'\r\n        align='center'\r\n        sx={{ color: 'white', paddingTop: 2, paddingBottom: 2 }}\r\n      >\r\n        Weather App\r\n      </Typography>\r\n      <SearchCity />\r\n      <Paper elevation={0}>\r\n        <Card>\r\n          <CardContent>\r\n            <CurrentWeather data={data.current} />\r\n\r\n            <Divider>\r\n              <Chip label='Daily' size='small' />\r\n            </Divider>\r\n\r\n            <WeatherChart prognoza={data.hourly} />\r\n\r\n            <Divider>\r\n              <Chip label='Next 7 days' size='small' />\r\n            </Divider>\r\n\r\n            <Box\r\n              sx={{\r\n                display: 'flex',\r\n                flexFlow: 'row nowrap',\r\n                gap: '5px',\r\n                overflowY: 'auto',\r\n                minWidth: 240,\r\n                marginTop: '10px',\r\n              }}\r\n            >\r\n              {data.daily.map((day) => {\r\n                return <Day day={day} key={day.dt} />;\r\n              })}\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport { Box, Container, CssBaseline } from '@mui/material';\n\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n      <Box sx={{ backgroundColor: '#00003f', paddingBottom: '50px' }}>\n        <Container maxWidth='sm'>\n          <Weather />\n        </Container>\n      </Box>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { setupListeners } from '@reduxjs/toolkit/query/react';\r\n\r\nimport { weatherApi } from './weatherApi';\r\n\r\nimport weatherReducer from './weatherSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    weather: weatherReducer,\r\n    [weatherApi.reducerPath]: weatherApi.reducer,\r\n  },\r\n\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(weatherApi.middleware),\r\n});\r\n\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\r\nsetupListeners(store.dispatch);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}